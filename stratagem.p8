pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- stratagem
-- by VM70

---@type {major: integer, minor: integer, patch: integer} semantic version number
VERSION = {
	major = 0,
	minor = 0,
	patch = 7,
}

---@alias Coords [integer, integer]
---@alias HighScore {initials: string, score: integer}
---@alias Match {move_score: integer, x: integer, y: integer, color: integer}
---@alias Player {grid_cursor: Coords, score: integer, init_level_score: integer, level_threshold: integer, level: integer, chances: integer, combo: integer, last_match: Match, letter_ids: integer[], placement: integer | nil, score_cursor: ScorePositions}

---@enum States
STATES = {
	title_screen = 1,
	game_init = 2,
	generate_board = 3,
	game_idle = 4,
	swap_select = 5,
	player_matching = 6,
	update_board = 7,
	level_up = 8,
	game_over = 9,
	enter_high_score = 10,
	high_scores = 11,
}

---@enum ScorePositions
SCORE_POSITIONS = {
	first = 1,
	second = 2,
	third = 3,
	ok = 4,
}

---@type integer[] List of level music starting positions
LEVEL_MUSIC = { 2, 8 }

---@type integer Number of gems in the game (max 8)
N_GEMS = 8

---@type integer Number of frames to wait before dropping new gems down
DROP_FRAMES = 3

---@type integer Number of frames to wait to show the match points
MATCH_FRAMES = 20

---@type integer[] main PICO-8 colors of gems
GEM_COLORS = { 8, 9, 12, 11, 14, 7, 4, 13 }

---@type integer How many points a three-gem match scores on level 1
BASE_MATCH_PTS = 3

---@type integer How many three-gem matches without combos should get you to level 2
L1_MATCHES = 50

---@type integer How many points needed to get to level 2
L1_THRESHOLD = L1_MATCHES * BASE_MATCH_PTS

---@type string Allowed initial characters for high scores
INITIALS = "abcdefghijklmnopqrstuvwxyz0123456789 "

---@type integer[][] game grid
Grid = {}

---@type Player table containing player information
Player = {}

---@type integer[] background patterns
-- herringbone pattern
-- 0100 -> 4
-- 1110 -> E
-- 0111 -> 7
-- 0010 -> 2
BGPatterns = { 0x4E72, 0xE724, 0x724E, 0x24E7 }

---@type {width: integer, height: integer, y_offset: integer} Title art sprite properties
TITLE_SPRITE = {
	width = 82,
	height = 31,
	y_offset = 10,
}

---@type States current state of the cartridge
CartState = STATES.title_screen

---@type HighScore[] high score
Leaderboard = {}

---@type integer frame counter for state transitions / pauses
FrameCounter = 0

--- Initialize the grid with all holes
function InitGrid()
	for y = 1, 6 do
		Grid[y] = {}
		for x = 1, 6 do
			Grid[y][x] = 0
		end
	end
end

--- Initialize the player for starting the game
function InitPlayer()
	---@type Player
	Player = {
		grid_cursor = { 3, 3 },
		score = 0,
		init_level_score = 0,
		level_threshold = L1_THRESHOLD,
		level = 1,
		chances = 3,
		combo = 0,
		last_match = { move_score = 0, x = 0, y = 0, color = 0 },
		letter_ids = { 1, 1, 1 },
		placement = nil,
		score_cursor = SCORE_POSITIONS.first,
	}
end

--- Initialize the high scores by reading from persistent memory
function LoadLeaderboard()
	cartdata("vm70_stratagem")
	for score_idx = 1, 10 do
		---@type integer[]
		local raw_score_data = {}
		for word = 1, 4 do
			raw_score_data[word] = dget(4 * (score_idx - 1) + word - 1)
		end
		if raw_score_data[1] == 0 then
			raw_score_data = { 1, 1, 1, (11 - score_idx) * 100 }
		end
		Leaderboard[score_idx] = {
			initials = INITIALS[raw_score_data[1]] .. INITIALS[raw_score_data[2]] .. INITIALS[raw_score_data[3]],
			score = raw_score_data[4],
		}
	end
end

--- Add the player's new high score to the leaderboard
function UpdateLeaderboard()
	local first = INITIALS[Player.letter_ids[1]]
	local second = INITIALS[Player.letter_ids[2]]
	local third = INITIALS[Player.letter_ids[3]]
	---@type HighScore
	local new_high_score = { initials = first .. second .. third, score = Player.score }
	if 1 <= Player.placement and Player.placement <= 10 then
		add(Leaderboard, new_high_score, Player.placement)
		Leaderboard[11] = nil
	end
end

--- equivalent of `string.find` in vanilla Lua's standard library
---@param str string
---@param wantChar string
---@return integer | nil
function StringFind(str, wantChar)
	for idx = 1, #str do
		if str[idx] == wantChar then
			return idx
		end
	end
	return nil
end

--- Save the leaderboard to the cartridge memory
function SaveLeaderboard()
	for score_idx, score in ipairs(Leaderboard) do
		local first = StringFind(INITIALS, score.initials[1])
		dset(4 * (score_idx - 1) + 0, first)
		local second = StringFind(INITIALS, score.initials[2])
		dset(4 * (score_idx - 1) + 1, second)
		local third = StringFind(INITIALS, score.initials[3])
		dset(4 * (score_idx - 1) + 2, third)
		dset(4 * (score_idx - 1) + 3, score.score)
	end
end

--- swap the two gems (done by the player)
---@param gem1 Coords
---@param gem2 Coords
function SwapGems(gem1, gem2)
	local temp = Grid[gem1[1]][gem1[2]]
	Grid[gem1[1]][gem1[2]] = Grid[gem2[1]][gem2[2]]
	Grid[gem2[1]][gem2[2]] = temp
end

--- Clear a match on the grid at the specific coordinates (if possible). Only clears when the match has 3+ gems
---@param coords Coords coordinates of a single gem in the match
---@param byPlayer boolean whether the clearing was by the player or automatic
---@return boolean # whether the match clearing was successful
function ClearMatching(coords, byPlayer)
	if Grid[coords[1]][coords[2]] == 0 then
		return false
	end
	local match_list = FloodMatch(coords, {})
	if #match_list >= 3 then
		local gem_color = GEM_COLORS[Grid[coords[1]][coords[2]]]
		for _, matchCoord in pairs(match_list) do
			Grid[matchCoord[1]][matchCoord[2]] = 0
		end
		if byPlayer then
			Player.combo = Player.combo + 1
			sfx(min(Player.combo, 7), -1, 0, 4) -- combo sound effects are #1-7
			local move_score = Player.level * Player.combo * BASE_MATCH_PTS * (#match_list - 2)
			Player.score = Player.score + move_score
			Player.last_match = { move_score = move_score, x = coords[2], y = coords[1], color = gem_color }
		end
		return true
	end
	if byPlayer then
		Player.last_match = { move_score = 0, x = 0, y = 0, color = 0 }
	end
	return false
end

--- Get the neighbors of the given coordinate
---@param gemCoords Coords
---@return Coords[] # array of neighbor coordinates
function Neighbors(gemCoords)
	local neighbors = {}
	if gemCoords[1] ~= 1 then
		neighbors[#neighbors + 1] = { gemCoords[1] - 1, gemCoords[2] }
	end
	if gemCoords[1] ~= 6 then
		neighbors[#neighbors + 1] = { gemCoords[1] + 1, gemCoords[2] }
	end
	if gemCoords[2] ~= 1 then
		neighbors[#neighbors + 1] = { gemCoords[1], gemCoords[2] - 1 }
	end
	if gemCoords[2] ~= 6 then
		neighbors[#neighbors + 1] = { gemCoords[1], gemCoords[2] + 1 }
	end
	return neighbors
end

--- Check whether a coordinate pair is in a coordinate list
---@param coordsList Coords[] list of coordinate pairs to search
---@param coords Coords coordinate pair to search for
---@return boolean # whether the coords was in the coords list
function Contains(coordsList, coords)
	for _, item in pairs(coordsList) do
		if item[1] == coords[1] and item[2] == coords[2] then
			return true
		end
	end
	return false
end

--- Find the list of gems that are in the same match as the given gem coordinate using flood filling
---@param gemCoords Coords current coordinates to search
---@param visited Coords[] list of visited coordinates. Start with "{}" if new match
---@return Coords[] # list of coordinates in the match
function FloodMatch(gemCoords, visited)
	-- mark the current cell as visited
	visited[#visited + 1] = gemCoords
	for _, neighbor in pairs(Neighbors(gemCoords)) do
		if not Contains(visited, neighbor) then
			if Grid[neighbor[1]][neighbor[2]] == Grid[gemCoords[1]][gemCoords[2]] then
				-- do recursion for all non-visited neighbors
				visited = FloodMatch(neighbor, visited)
			end
		end
	end
	return visited
end

--- Do all cursor updating actions (during gameplay)
function UpdateGridCursor()
	if CartState == STATES.swap_select then
		-- player has chosen to swap gems
		if btnp(0) and Player.grid_cursor[2] > 1 then
			-- swap left
			SwapGems(Player.grid_cursor, { Player.grid_cursor[1], Player.grid_cursor[2] - 1 })
		elseif btnp(1) and Player.grid_cursor[2] < 6 then
			-- swap right
			SwapGems(Player.grid_cursor, { Player.grid_cursor[1], Player.grid_cursor[2] + 1 })
		elseif btnp(2) and Player.grid_cursor[1] > 1 then
			-- swap up
			SwapGems(Player.grid_cursor, { Player.grid_cursor[1] - 1, Player.grid_cursor[2] })
		elseif btnp(3) and Player.grid_cursor[1] < 6 then
			-- swap down
			SwapGems(Player.grid_cursor, { Player.grid_cursor[1] + 1, Player.grid_cursor[2] })
		end
		if btnp(0) or btnp(1) or btnp(2) or btnp(3) then
			CartState = STATES.player_matching
		end
	end
	-- move the cursor around the board while swapping or idle
	if btnp(0) and Player.grid_cursor[2] > 1 then
		-- move left
		Player.grid_cursor[2] = Player.grid_cursor[2] - 1
	elseif btnp(1) and Player.grid_cursor[2] < 6 then
		-- move right
		Player.grid_cursor[2] = Player.grid_cursor[2] + 1
	elseif btnp(2) and Player.grid_cursor[1] > 1 then
		-- move up
		Player.grid_cursor[1] = Player.grid_cursor[1] - 1
	elseif btnp(3) and Player.grid_cursor[1] < 6 then
		-- move down
		Player.grid_cursor[1] = Player.grid_cursor[1] + 1
	end
	-- idle <-> swapping
	if (btnp(4) or btnp(5)) and CartState == STATES.game_idle then
		-- idle to swapping
		CartState = STATES.swap_select
	elseif (btnp(4) or btnp(5)) and CartState == STATES.swap_select then
		-- swapping to idle
		CartState = STATES.game_idle
	end
end

--- Do all cursor updating actions (during high score entry)
function UpdateScoreCursor()
	if Player.score_cursor ~= SCORE_POSITIONS.first and btnp(0) then
		-- move left
		Player.score_cursor = Player.score_cursor - 1
	elseif Player.score_cursor ~= SCORE_POSITIONS.ok and btnp(1) then
		-- move right
		Player.score_cursor = Player.score_cursor + 1
	elseif Player.score_cursor ~= SCORE_POSITIONS.ok and btnp(2) then
		-- increment letter
		Player.letter_ids[Player.score_cursor] = max((Player.letter_ids[Player.score_cursor] + 1) % (#INITIALS + 1), 1)
	elseif Player.score_cursor ~= SCORE_POSITIONS.ok and btnp(3) then
		-- decrement letter
		Player.letter_ids[Player.score_cursor] = max((Player.letter_ids[Player.score_cursor] - 1) % (#INITIALS + 1), 1)
	elseif Player.score_cursor == SCORE_POSITIONS.ok and (btnp(4) or btnp(5)) then
		-- all done typing score
		UpdateLeaderboard()
		SaveLeaderboard()
		CartState = STATES.high_scores
		music(24)
	end
end

--- draw the cursor on the grid
function DrawCursor()
	-- fillp(0x33CC)
	-- -- 0011 -> 3
	-- -- 0011 -> 3
	-- -- 1100 -> C
	-- -- 1100 -> C
	local color = 7
	if CartState == STATES.swap_select then
		color = 11
	end
	rect(
		16 * Player.grid_cursor[2],
		16 * Player.grid_cursor[1],
		16 * Player.grid_cursor[2] + 15,
		16 * Player.grid_cursor[1] + 15,
		color
	)
end

--- draw the moving game background
function DrawGameBG()
	fillp(BGPatterns[1 + flr(time() % #BGPatterns)])
	rectfill(0, 0, 128, 128, 0x21)
	fillp(0)
	rectfill(14, 14, 113, 113, 0)
	map(0, 0, 0, 0, 16, 16, 0)
end

--- draw the gems in the grid
function DrawGems()
	for y = 1, 6 do
		for x = 1, 6 do
			local color = Grid[y][x]
			if color ~= 0 then
				sspr(16 * (color - 1), 16, 16, 16, 16 * x, 16 * y)
			end
			-- print(color, 16 * x, 16 * y, 11)
		end
	end
end

--- Clear the matches on the grid.
---@param byPlayer boolean whether the match is made by the player
---@return boolean # whether any matches were cleared
function ClearGridMatches(byPlayer)
	local had_matches = false
	for y = 1, 6 do
		for x = 1, 6 do
			had_matches = had_matches or ClearMatching({ y, x }, byPlayer)
		end
	end
	return had_matches
end

--- Fill holes in the grid by dropping gems.
---@return boolean # whether the grid has any holes
function FillGridHoles()
	local has_holes = false
	for y = 6, 1, -1 do
		for x = 1, 6 do
			if Grid[y][x] == 0 then
				if y == 1 then
					Grid[y][x] = 1 + flr(rnd(N_GEMS))
				else
					has_holes = true
					-- printh("Found a hole at " .. x .. "," .. y)
					Grid[y][x] = Grid[y - 1][x]
					Grid[y - 1][x] = 0
				end
			end
		end
	end
	return has_holes
end

--- Draw the HUD (score, chances, level progress bar, etc) on the screen
function DrawHUD()
	print("score:" .. Player.score, 17, 9, 7)
	print("chances:" .. max(Player.chances, 0), 73, 9, 8)
	print("level:" .. Player.level, 49, 121, 7)
	-- calculate level completion ratio
	local level_ratio = (Player.score - Player.init_level_score) / (Player.level_threshold - Player.init_level_score)
	level_ratio = min(level_ratio, 1)
	local rect_length = (93 * level_ratio)
	rectfill(17, 114, 17 + rect_length, 117, 7)
end

function DrawTitleBG()
	rectfill(0, 0, 128, 128, 1)
	-- draw wobbly function background
	for x = 0, 128, 3 do
		for y = 0, 128, 3 do
			local color = 1
			if
				cos(27 / 39 * x / 61 + y / 47 + time() / 23 + cos(29 / 31 * y / 67 + time() / 27))
				> sin(22 / 41 * x / 68 + y / 57 * time() / 32)
			then
				color = 2
			end
			pset(x, y, color)
		end
	end
	map(16, 0, 0, 0, 16, 16)
end

---@param str string | integer
---@param pad string
---@param length integer
function LeftPad(str, pad, length)
	if length < #str then
		error("desired length is less than input string")
	end
	local padded = "" .. str
	while #padded < length do
		padded = pad .. padded
	end
	return padded
end

--- draw the leaderboard
function DrawLeaderboard()
	-- 11 chars * 3 + 10 gaps = 43 px
	print("high scores", 42, 8, 7)
	for i, score in ipairs(Leaderboard) do
		-- use the format "XX. AAA: #####" for each score
		-- 14 chars * 3 + 13 gaps = 55 px
		local padded_place = LeftPad(tostr(i), " ", 2) .. ". "
		local padded_score = LeftPad(tostr(score.score), " ", 5)
		print(padded_place .. score.initials .. " " .. padded_score, 36, 12 + 6 * i, 7)
	end
	print("🅾️/❎: return to title", 20, 94, 7)
end

-- Draw the title screen
function DrawTitleFG()
	-- draw foreground title
	sspr(
		0,
		32,
		TITLE_SPRITE.width,
		TITLE_SPRITE.height,
		64 - TITLE_SPRITE.width / 2,
		TITLE_SPRITE.y_offset,
		TITLE_SPRITE.width,
		TITLE_SPRITE.height
	)
	print(
		"V" .. VERSION.major .. "." .. VERSION.minor .. "." .. VERSION.patch,
		64 - TITLE_SPRITE.width / 2,
		TITLE_SPRITE.y_offset + TITLE_SPRITE.height + 1,
		7
	)
	print("🅾️: start game", 36, 64, 7)
	print("❎: high scores", 36, 72, 7)
end

--- Increase the player level and perform associated actions
function LevelUp()
	Player.level = Player.level + 1
	Player.init_level_score = Player.score
	Player.level_threshold = (
		Player.init_level_score + (L1_MATCHES + 20 * (Player.level - 1)) * Player.level * BASE_MATCH_PTS
	)
	InitGrid()
end

--- Draw the point numbers for the player's match where the gems were cleared
function DrawMatchPoints()
	if Player.combo ~= 0 then
		print(
			chr(2) .. "0" .. Player.last_match.move_score,
			16 * Player.last_match.x + 1,
			16 * Player.last_match.y + 1,
			Player.last_match.color
		)
	end
end

--- Calculate the player's placement in the leaderboard.
---@return integer | nil # which placement (1-10) if the player got a high score; nil otherwise
function PlayerPlacement()
	for scoreIdx, score in ipairs(Leaderboard) do
		if Player.score > score.score then
			return scoreIdx
		end
	end
	return nil
end

--- Get the corresponding ordinal indicator for the place number (e.g., 5th for 5)
---@param place integer
---@return string
function OrdinalIndicator(place)
	if place == 1 then
		return "st"
	elseif place == 2 then
		return "nd"
	elseif place == 3 then
		return "rd"
	elseif 4 <= place and place <= 10 then
		return "th"
	else
		error("only works for 1-10")
	end
end

--- Get the color of the score position for drawing the high score UI
---@param score_position ScorePositions
function HSColor(score_position)
	local color = 7
	if score_position == Player.score_cursor then
		color = 11
	end
	return color
end

--- Play the corresponding music for the given level number
---@param level integer current level number
function PlayLevelMusic(level)
	local musicID = (level % #LEVEL_MUSIC) + 1
	music(LEVEL_MUSIC[musicID])
end

function DrawInitialEntering()
	print(INITIALS[Player.letter_ids[1]], 16, 36, HSColor(SCORE_POSITIONS.first))
	if Player.score_cursor == SCORE_POSITIONS.first then
		rect(16, 36 + 6, 16 + 2, 36 + 6, 11)
	end
	print(INITIALS[Player.letter_ids[2]], 21, 36, HSColor(SCORE_POSITIONS.second))
	if Player.score_cursor == SCORE_POSITIONS.second then
		rect(21, 36 + 6, 21 + 2, 36 + 6, 11)
	end
	print(INITIALS[Player.letter_ids[3]], 26, 36, HSColor(SCORE_POSITIONS.third))
	if Player.score_cursor == SCORE_POSITIONS.third then
		rect(26, 36 + 6, 26 + 2, 36 + 6, 11)
	end
	print("ok", 31, 36, HSColor(SCORE_POSITIONS.ok))
	if Player.score_cursor == SCORE_POSITIONS.ok then
		rect(31, 36 + 6, 31 + 6, 36 + 6, 11)
	end
end

function _init()
	cls(0)
	music(24)
	InitPlayer()
	InitGrid()
	LoadLeaderboard()
end

function _draw()
	if CartState == STATES.title_screen then
		DrawTitleBG()
		DrawTitleFG()
	elseif (CartState == STATES.game_init) or (CartState == STATES.generate_board) then
		DrawGameBG()
		DrawHUD()
	elseif (CartState == STATES.game_idle) or (CartState == STATES.swap_select) then
		DrawGameBG()
		DrawGems()
		DrawCursor()
		DrawHUD()
	elseif (CartState == STATES.update_board) or (CartState == STATES.player_matching) then
		DrawGameBG()
		DrawGems()
		DrawHUD()
		DrawMatchPoints()
	elseif CartState == STATES.level_up then
		DrawGameBG()
		DrawHUD()
		print("level " .. Player.level .. " complete", 16, 16, 7)
		print("get ready for level " .. Player.level + 1, 16, 22, 7)
	elseif CartState == STATES.game_over then
		DrawGameBG()
		DrawHUD()
		print("game over", 46, 61, 7)
	elseif CartState == STATES.enter_high_score then
		DrawGameBG()
		DrawHUD()
		print("nice job!", 16, 16, 7)
		print("you got " .. Player.placement .. OrdinalIndicator(Player.placement) .. " place", 16, 22, 7)
		print("enter your initials", 16, 28, 7)
		DrawInitialEntering()
	elseif CartState == STATES.high_scores then
		DrawTitleBG()
		DrawLeaderboard()
	end
end

function _update()
	if CartState == STATES.title_screen then
		if btnp(4) then
			CartState = STATES.game_init
		elseif btnp(5) then
			CartState = STATES.high_scores
		end
	elseif CartState == STATES.game_init then
		InitPlayer()
		InitGrid()
		CartState = STATES.generate_board
	elseif CartState == STATES.generate_board then
		if not FillGridHoles() then
			if not ClearGridMatches(false) then
				CartState = STATES.game_idle
				PlayLevelMusic(Player.level)
			end
		end
	elseif CartState == STATES.game_idle then
		UpdateGridCursor()
		if Player.score >= Player.level_threshold then
			CartState = STATES.level_up
			FrameCounter = 0
		elseif Player.chances == -1 then
			Player.chances = 0
			music(0)
			CartState = STATES.game_over
			FrameCounter = 0
		end
	elseif CartState == STATES.swap_select then
		UpdateGridCursor()
	elseif CartState == STATES.update_board then
		if FrameCounter ~= MATCH_FRAMES then
			FrameCounter = FrameCounter + 1
		elseif (FrameCounter - MATCH_FRAMES) % DROP_FRAMES == 0 then
			if not FillGridHoles() then
				CartState = STATES.player_matching
			end
		end
	elseif CartState == STATES.player_matching then
		if not ClearGridMatches(true) then
			if Player.combo == 0 then
				sfx(0, -1, 0, 3) -- "error" sound effect
				Player.chances = Player.chances - 1
			end
			Player.combo = 0
			CartState = STATES.game_idle
		else
			CartState = STATES.update_board
			FrameCounter = 0
		end
	elseif CartState == STATES.level_up then
		if FrameCounter ~= 100 then
			FrameCounter = FrameCounter + 1
		else
			LevelUp()
			CartState = STATES.generate_board
			FrameCounter = 0
		end
	elseif CartState == STATES.game_over then
		if FrameCounter ~= 100 then
			FrameCounter = FrameCounter + 1
		elseif btnp(4) or btnp(5) then
			Player.placement = PlayerPlacement()
			if Player.placement == nil then
				CartState = STATES.high_scores
				music(24)
			else
				CartState = STATES.enter_high_score
			end
		end
	elseif CartState == STATES.enter_high_score then
		UpdateScoreCursor()
	elseif CartState == STATES.high_scores then
		if btnp(4) or btnp(5) then
			CartState = STATES.title_screen
		end
	end
end
__gfx__
0000000000000000000000000000000000155d0000000000000000000007700000aaaa0000077000077777702ffff00000777700000000000066660000000000
07000070d6666666666666666666666600155d000c7777700c777770007887000a9999a0000770001cccccc72eeeef000d6666700999999006dddd6000000000
007007005dddddddddddddddddddddd600155d0001cccc7dd1cccc70028888704994499a003bb7001cc111c72e22eef00d6dd6702aa444491dd11dd600000000
000770005dddddddddddddddddddddd600155d0001cccc7551cccc702888288749a9949a003bb7001c7cc1c72efe2eefd6766d67244222491d6001d600000000
000770005dddddddddddddddddddddd600155d0001cccc7551cccc702887888749a9949a03b73b701c7cc1c72eefe2efd6766d67249994491d6001d600000000
007007005dddddddddddddddddddddd600155d0001cccc7111cccc7002888870499aa99a03b73b701c777cc702eef2ef0d67767024444aa91dd66dd600000000
0700007055555555555555555555555d00155d00011111c0011111c000288200049999403bbbbbb71cccccc7002eeeef0d6666700222222001dddd6000000000
0000000000000000000000000000000000155d0000155d0000155d00000220000044440033333377011111100002222200dddd00000000000011110000000000
000000005ddddddddddddddddddddddd0000000000155d0000155d00000000000000000000000000000000000000000000000000000000000000000000000000
0000000015555555555555555555555d000000000c7777700c777770000000000000000000000000000000000000000000000000000000000000000000000000
0000000015555555555555555555555ddddddddd01cccc7dd1cccc70000000000000000000000000000000000000000000000000000000000000000000000000
0000000015555555555555555555555d5555555501cccc7551cccc70000000000000000000000000000000000000000000000000000000000000000000000000
0000000015555555555555555555555d5555555501cccc7551cccc70000000000000000000000000000000000000000000000000000000000000000000000000
0000000015555555555555555555555d1111111101cccc7111cccc70000000000000000000000000000000000000000000000000000000000000000000000000
0000000011111111111111111111111500000000011111c0011111c0000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000770000000000000aaaa000000000777777777700000000007700000000ffffffff0000000000077777777000000000000000000000000066666600000
00000078870000000000aa9999aa0000001cccccccccc7000000007bb700000002eeeeeeef0000000000766666670000000000000000000000006dddddd60000
0000078888700000000a99999999a00001cccccccccccc700000003bb700000002e22222eef00000000d66dddd66700000099999999990000001dddddddd6000
00002882288700000049994444999a0001ccc1111111cc70000003bbbb70000002efefff2eef0000000d66d66d6670000094aaa444444900001ddd1111ddd600
0002882772887000004997aaaa499a0001cc7cccccc1cc70000003b73b70000002ef2eeef2eef00000d6676666d6670002444aaa4444449001ddd660011ddd60
00288788872887000499a49999a499a001cc7cccccc1cc7000003bb73bb7000002ef2eeeef2eef0000d6676666d66700024442222222449001dd66000011dd60
02887288887288700499a49999a499a001cc7cccccc1cc7000003b7bb3b7000002ef2eeeeef2eef00d667666666d6670024494444442449001dd60000001dd60
02887288887288700499a49999a499a001cc7cccccc1cc700003bb7bb3bb700002eef2eeeeef2ef00d667666666d6670024494444442449001dd60000001dd60
00288728882887000499a49999a499a001cc7cccccc1cc700003b7bbbb3b7000002eef2eeeef2ef000d6676666766700024499999994449001dd66000061dd60
000288722788700000499a4444799a0001cc7cccccc1cc70003bb7bbbb3bb7000002eef2eeef2ef000d667666676670002444444aaa4449001ddd660066ddd60
0000288778820000004999aaaa999a0001cc7777777ccc70003b7bbbbbb3b70000002eef222e2ef0000d66766766d000002444444aaa4200001ddd6666ddd600
0000028888200000000499999999a00001cccccccccccc7003bb77777733bb70000002eeffff2ef0000d66777766d00000022222222220000001dddddddd1000
00000028820000000000449999440000001cccccccccc70003bbbbbbbbbbbb700000002eeeeeeef00000d666666d0000000000000000000000001dddddd10000
000000022000000000000044440000000001111111111000033333333333377000000002222222f00000dddddddd000000000000000000000000011111100000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00777777770000777777777777007777777777000000777777770000777777777777000077777777000000000000000000000000000000000000000000000000
00777777770000777777777777007777777777000000777777770000777777777777000077777777000000000000000000000000000000000000000000000000
77777777777700777777777777007777777777770077777777777700777777777777007777777777770000000000000000000000000000000000000000000000
77777777777700777777777777007777777777770077777777777700777777777777007777777777770000000000000000000000000000000000000000000000
77775555555500555577775555007777555577770077775555777700555577775555007777555577770000000000000000000000000000000000000000000000
77770000000000000077770000007777000077770077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
55777777770000000077770000007777777777550077777777777700000077770000007777777777770000000000000000000000000000000000000000000000
00777777770000000077770000007777777777000077777777777700000077770000007777777777770000000000000000000000000000000000000000000000
00555555777700000077770000007777777755000077775555777700000077770000007777555577770000000000000000000000000000000000000000000000
00000000777700000077770000007777777700000077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
77777777777700000077770000007777557777000077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
77777777777700000077770000007777007777000077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
55777777775500000077770000007777005577770077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
00777777770000000077770000007777000077770077770000777700000077770000007777000077770000000000000000000000000000000000000000000000
00555555550000000055550000005555000055550055550000555500000055550000005555000055550000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000077000000000000007777777700007777777777770077000000000077000000000000770000000000000000000000000000000000000000000000000000
00000788700000000000007777777700007777777777770077000000000077000000000007887000000000000000000000000000000000000000000000000000
00007888870000000000777777777777007777777777770077770000007777000000000078888700000000000000000000000000000000000000000000000000
00028822887000000000777777777777007777777777770077770000007777000000000288228870000000000000000000000000000000000000000000000000
00288277288700000000777755555555007777555555550077777700777777000000002882772887000000000000000000000000000000000000000000000000
02887888728870000000777700000000007777000000000077777700777777000000028878887288700000000000000000000000000000000000000000000000
28872888872887000000777700777777007777777700000077777777777777000000288728888728870000000000000000000000000000000000000000000000
28872888872887000000777700777777007777777700000077777777777777000000288728888728870000000000000000000000000000000000000000000000
52887288828875000000777700557777007777555500000077775577557777000000528872888288750000000000000000000000000000000000000000000000
05288722788750000000777700007777007777000000000077770077007777000000052887227887500000000000000000000000000000000000000000000000
00528877882500000000777777777777007777777777770077770055007777000000005288778825000000000000000000000000000000000000000000000000
00052888825000000000777777777777007777777777770077770000007777000000000528888250000000000000000000000000000000000000000000000000
00005288250000000000557777777755007777777777770077770000007777000000000052882500000000000000000000000000000000000000000000000000
00000522500000000000007777777700007777777777770077770000007777000000000005225000000000000000000000000000000000000000000000000000
00000055000000000000005555555500005555555555550055550000005555000000000000550000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777007777770777770007777007777770077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777707777770777777077777707777770777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77000000077000770077077007700077000770077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777000077000777770077777700077000777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00007700077000777700077007700077000770077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777700077000770770077007700077000770077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
07777000077000770077077007700077000770077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000777700777777070000070000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00787000007777770777777077000770000078700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02888700007700000770000077707770000288870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
28888870007707770777700077777770002888887000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02888700007700770770000077070770000288870000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00282000007777770777777077000770000028200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020000000777700777777077000770000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0005111212121213141112121213060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0004000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400000000000000000000000004000d080900000000000000000000080b0c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001501020202020202020202020316000c0b080a0e0000000000000d0c0a070b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000111212121213000000000007090e0d09080700000e090b0c0e0d0a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
011000001c47017470124701300013000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
31100000180761c0561f036240160f5000f5000e5000e5000e5000a5000a5000c5000c5000c5000c5000c5000c5000c5000c500000000c5000c5000c5000c5000c5000c5000c5000c5000c500000000000000000
311000001a0761e056210362601600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
311000001c07620056230362801600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
311000001e07622056250362a01600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
311000002007624056270362c01600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
311000002207626056290362e01600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3110000024076280562b036300160f5000f5000e5000e5000e5000a5000a5000c5000c5000c5000c5000c5000c5000c5000c500000000c5000c5000c5000c5000c5000c5000c5000c5000c500000000000000000
15160000187551c7551f7552275122750227502175121750217501d7501d7511f7511f7501f7501f7501f7501f7501f7501f75518755187001f7001f7001f7001f7001f7001f7001f7001f7001f7000070000000
0516000013055180551c0551b0511b0501b0501d0511d0501d0501a0501a0511c0511c0501c0501c0501c0501c0501c0501c0550c055000000000000000000000000000000000000000000000000000000000000
991300000c3500c3200c3000c3500c3200c3000c3500c3201835018320183000c3500c3200c3000e3500e3200f3500f3200f3000f3500f3200f3000f3500f3201b3501b3201b3000f3500f3200f3001335013320
991300000a3500a3200a3000a3500a3200a3000a3500a3201635016320163000a3500a3200a3000a3500a32007350073200730007350073200730007350073201335013320133000735007320113000a3500a320
011300000c5533c6053c6130c5531a6550c3000c5533c6033c6131a6000c5530c3001a6550c3001a6553c6130c5533c6053c6130c5531a6550c3000c5533c6033c6131a6000c5530c3001a6550c3001a6553c613
011300001f1452414526145271451f1452414526145271451f1452414526145271452b1452714524145221451f14526145271452e1451f14526145271452e1451f14526145271452e14527145261452e1452b145
011300002914526145241452214529145261452414522145291452614524145221452e1452914526145221452b1452614524145221452b1452614524145221452b14526145241451d1451f1451d1452614522145
491300001f2501f0001d2501b2501d2521d2001b2501a2501b2521b2001a250182501a2521826516265182651325013250132550020016250162501625500200112501125011255002000f2500f2500f25500000
491300001d2501f0001b2501a2501b2521d2001f2501f2501d2521b2001f2501f252242551f2651d2651b2651f2501f2501f255002001a2501a2501a25500200162501625016255002001a2501a2501a25500000
491300001d2501f0001b2501a2501b2521d2001f2501f2501d2521b2001f2501f2521d2551b26518265162651825018250182550b000132501325013255000001625016250162550020017250172501725500000
99130000083500832000000083500832000000143501432008350083200000014350083510000008350083200a3500a320000000a3500a3200000016350163200a3500a32000000163500a351000000a3500a320
991300000c3500c320000000c3500c3200000018350183200c3500c32000000183500c351000000e3500e3200f3500f320000000f3500f320000001b3501b3200f3500f320000001b3500f351000000f3500f320
a128000023345253452a34523345253452a345253452a34523345253452a34523345253452a345253452a34521345233452834521345233452834523345283452134523345283452134523345283452334528345
4928000009100101401214019140191451714015140101402110010140121401914019145171401514010140211000e140131401714017140171401714017145170000e140131401714017140171401714017145
0128000009050090501a62309050090550c5231a6230905509050090501a62309050090550c5231a6230905507050070501a62307050070550c5231a6230705507050070501a62307050070550c5231a62307055
492800000910012140171401a1401a1451914017140121400910012140171401a1401a14519140171401214021100101401514019140191451714015140101401700010140151401914019145171401514010140
011200000c553000000c5531a6031a633000003c6150c553000003c6150c553000001a633000003c615000000c553000000c5531a6031a633000003c6150c553000003c6150c553000003c6151a6331a6333c615
912800001c34520345213452334023345253452834525340253450030000300003000030025345283452534526345233451f3451e3401e3451f345213452334023345003000030000300003001f3452134523345
912800002534523345213451c3401c34520345213452834028345003000030000300003002034521345283452b3452a3452834523340233452534526345253402534500300003000030000300253452634525345
912800002534523345213451c3401c34520345213452834028345000000000000000000002034521345283452b3452a3452834523340233452534526345253402534500000000000000000000253452634525345
912800002634525345233451e3401e34523345253452634026345000000000000000000002334525345263452534523345213451c3401c3452034521345283402834500000000000000000000203452134528345
912800002b3452a345283452334023345253452634525340253450000000000000000000025345263452534523345213452034521340213451c34520345213402134500000000000000000000000000000000000
012800000b0500b0501a6230b0500b0550c5231a6230b0550b0500b0501a6230b0500b0550c5231a6230b05509050090501a62309050090550c5231a6230905509050090501a62309050090550c5231a62309055
011200001930015300193001a5501e5501f5501f55523550235552655026550265502655524100215502155523550235551f5501f5551e5501a5501a555175501755017550175501755017555000000000000000
01120000195001550018550185501755016550155501d5501d5501d5551b5501b5501a5501a5501b5501b55018550185501855516550155501655016555135501355013550135551155011550115501155500000
011200001050013500175501755514550105501b5501755017555145501455012550125501455010550105550b5500b5500f5501055014550175501b550205512055120550205551e5501e5501e5501c5501c555
99120010074500e450134501345507450074550e45013450134550e4500e455074500e4500e455074500745500400004000040000400004000040000400004000040000400004000040000400004000040000400
99120010054500c450114501145505450054550c45011450114550c4500c455054500c4500c455054500545500400004000040000400004000040000400004000040000400004000040000400004000040000400
99120010044500b450104501045504450044550b45010450104550b4500b455044500b4500b455044500445500400004000040000400004000040000400004000040000400004000040000400004000040000400
9912001000450074500c4500c4550045000455074500c4500c4550745007455004500745007455004500045500400004000040000400004000040000400004000040000400004000040000400004000040000400
01120000215501f5501c5501c5551a5501c5501c550155501555015550155551355015550185501a5501a5501c5501c5501c5501c5551a55018550215501c5501f5501a5501c55018550155501a5501855018555
0112000014550175501b5501b5501b5501b555195501955517550155501555517550175501b550175501455010550125501455017550175501b55020550205502355123550235552055020550205502055020555
011200002155021550215552655026550265502655026555245501f550215501c5501f550185501c550155501c5501c5551a5502155021550215551f5501a5501c5501c555135501555115550155501555015555
011000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
05 48490809
00 41424344
01 56141516
00 56141516
00 56191516
00 561a1516
00 561c171e
02 561d171e
01 4a0d0a0c
00 4b0e0b0c
00 4a0d0a0c
00 4b0e0b0c
00 4d0f0a0c
00 41100b0c
00 410f0a0c
00 41110b0c
00 4a0d120c
00 4b0e130c
00 4a0d120c
00 4b0e130c
00 4a0f120c
00 4b10130c
00 4a0f120c
02 4211130c
01 411f2218
00 41202318
00 411f2218
00 41202318
00 41212418
00 56262518
00 41272418
02 41282518

